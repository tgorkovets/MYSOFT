#We get raw data frames for nucleosome-water interactions in nucleosome
## in this version 2: we try a more comprehensive approach - similar to all other data frames
#we do not do averaging here

from VMD import *
from Molecule import *
from atomsel import *
import pandas as pd
import numpy as np
from datetime import datetime
from animate import *

import sys
sys.path.append('/Volumes/MDBD/Dropbox/work/MYSOFT/structure_analysis')


from int_analyze import find_contacts
from int_analyze import find_hbonds
from int_analyze import find_watermed_bonds
from int_analyze import find_watermed_bonds2
from int_analyze import find_ionmed_bonds


from vmd_int_analyze import get_contacts
from vmd_int_analyze import get_hbonds, get_hbonds_imp, get_salt_bridges_imp, get_watermed_bonds_imp, get_ionmed_bonds_imp

# from collections import OrderedDict
#import sys

#Let's define data frame panel
sum_df=pd.DataFrame()

startTime = datetime.now()



#print sys.path
### Let's load the structure

mol=Molecule()

mol.load("../input/1kx5_ready.psf")
mol.load("../analysis_data/md_nucl_solv.dcd",first=0,step=10)
nf=mol.numFrames()

#Here we need to produce a raw data frame for WATein-DNA interactions
#See definitions in our report

for i in range(0,nf):
	goto(i)
	print "Frame",i

	######################################################
	#Now let's proceed with hydrogen bonds               #
	######################################################
	DNA=atomsel("(nucleic and noh)")

	WAT=atomsel("name OH2 and within 4.0 of index %s" % " ".join(map(str,DNA.get('index'))))


	df_hbonds=get_hbonds_imp(DNA,WAT,3.5,30,columns=['DNA_chain','DNA_resid','DNA_atom','WAT_chain','WAT_resid','WAT_atom','type','param1','param2','param3'])
	df_cont=get_contacts(DNA,WAT,3.9,columns=['DNA_chain','DNA_resid','DNA_atom','WAT_chain','WAT_resid','WAT_atom','type','param1'],code='SC')


	df=pd.concat([df_cont,df_hbonds])
	df = df.reset_index(drop=True)
	df['Time']=i
	sum_df=pd.concat([sum_df,df])
sum_df = sum_df.reset_index(drop=True)

# bdf = pd.DataFrame()
# for key in panel_dict:
# 	value=panel_dict[key]
# 	value['Time']=key
# 	bdf=bdf.append(value)
sum_df.to_csv('../analysis_data/wat_dna_int_raw_df.csv',index=False)
###Here are some display snippets

if(0):
	reps=mol.reps()
	reps[0].changeSelection("(nucleic or WATein) and noh")
	a,b,d=zip(*contacts)
	c=0
	for i,j in zip(a,b):
		vdw=MoleculeRep(style='VDW', material='Opaque')
		mol.addRep(vdw)     
		#index=" ".join(map(str,(list(a)+list(b))))
		vdw.changeSelection('index %d %d'%(i,j))
		vdw.changeColor("ColorID %d"%(c%32))
		c=c+1


if(0):
	reps=mol.reps()
	reps[0].changeSelection("(nucleic or WATein) and noh")
	a,b,d=zip(*contacts)
	vdw=MoleculeRep(style='VDW', material='Opaque')
	mol.addRep(vdw)     
	index=" ".join(map(str,(list(a))))
	vdw.changeSelection('index %s'%index)
	# vdw.changeColor("ColorID %d"%(c%32))

# mol load psf only_nucl_init.psf
# mol addfile only_nucl_aligned.pdb waitfor all


# set hlist [list "segname CHA" "segname CHE" "segname CHB" "segname CHF" "segname CHC" "segname CHG" "segname CHD" "segname CHH"]
# set hname [list "H3_A" "H3_E" "H4_B" "H4_F" "H2A_C" "H2A_G" "H2B_D" "H2B_H"]




# set nframes [expr  [molinfo top get numframes]  ]

# set sel [atomselect top "nucleic"]
# set sel2 [atomselect top "WATein"]


# set atoms [$sel list]

#do something
print "Execution time:"
print(datetime.now()-startTime)
print "Total interactions",len(sum_df)
print "Total H-bonds",len(sum_df[sum_df.type=='HB'])

# if not (len(sum_df)==25063):
#     raise AssertionError()
# exit

exit()

