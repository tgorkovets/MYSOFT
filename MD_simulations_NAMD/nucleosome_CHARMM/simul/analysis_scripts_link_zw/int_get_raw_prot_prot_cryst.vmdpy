#We get raw data frames for PROTEIN-PROTein interactions in nucleosome
#This version is for crystal
# is produces a bit different data frame - since we do not know the positions of hydrogens


from VMD import *
from Molecule import *
from atomsel import *
import pandas as pd
import numpy as np
from datetime import datetime
import itertools
import sys
sys.path.append('/Volumes/MDBD/Dropbox/work/MYSOFT/structure_analysis')

from int_analyze import find_contacts
from int_analyze import find_hbonds
from int_analyze import find_watermed_bonds
from int_analyze import find_watermed_bonds2
from int_analyze import find_ionmed_bonds

from vmd_int_analyze import get_contacts
from vmd_int_analyze import get_hbonds, get_hbonds_imp, get_salt_bridges_imp, get_watermed_bonds_imp, get_ionmed_bonds_imp

# from collections import OrderedDict
#import sys

#Let's define data frame panel
panel_dict_contacts={}

startTime = datetime.now()

sum_df=pd.DataFrame()


#print sys.path
### Let's load the structure

mol=Molecule()
# mol.load("only_nucl_init.psf")
# mol.load("only_nucl_aligned.pdb")

# mol.load("structs/CCGG.pdb")


# mol.load("../analysis_data/1kx5_cryst_w_ions.psf")
# mol.load("../analysis_data/1kx5_cryst_w_ions.pdb")
mol.load("../analysis_data/1kx5_cryst_H_relaxed.psf")
mol.load("../analysis_data/1kx5_cryst_H_relaxed.pdb")

#Here we need to produce a raw data frame for PROTein-DNA interactions
#See definitions in our report
all_prot="(noh and ((segname CHA CHE and resid > 36) or (segname CHB CHF and resid > 15) or (segname CHC CHG and resid > 11 and resid < 119) or (segname CHD CHH and resid > 20)))"

chains=['CHA','CHB','CHC','CHD','CHE','CHF','CHG','CHH']
#Since we want interactions between separate chains but not inside chains
#we will have to loop through chains
for chain1,chain2 in itertools.combinations(chains,2):
	# break
	print "\nAnalyzing interchain interactions", chain1, chain2
	PROT1=atomsel("segname %s and "%chain1 + all_prot)
	PROT2=atomsel("segname %s and "%chain2 + all_prot)

	############################
	######Contacts calculation
	#############################
	df_cont=get_contacts(PROT1,PROT2,3.9,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1'],code='SC')

	######################################################
	#Now let's proceed with hydrogen bonds               #
	######################################################
	df_hbonds=get_hbonds_imp(PROT1,PROT2,3.5,30,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1','param2','param3'])

	#################################################
	## Now let's calculate salt bridges
	#############
	df_ionpairs=get_salt_bridges_imp(PROT1,PROT2,3.9,False,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1'])

	#############
	# Now let's go for Water mediated interactions
	####
	df_watermed_bonds=get_watermed_bonds_imp(PROT1,PROT2,3.5,30,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param3'])

	##########################
	#Now let's see ion mediated bonds
	#####
	df_ionmed_bonds=get_ionmed_bonds_imp(PROT1,PROT2,3.9,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1','param3'],code='IM')
	
	df=pd.concat([df_cont,df_hbonds,df_ionpairs,df_watermed_bonds,df_ionmed_bonds])
	df = df.reset_index(drop=True)
	
	sum_df=pd.concat([sum_df,df])
#Let's add interactions inside chains
for chain in chains:
	print "\nAnalyzing intrachain interactions", chain
	PROT1=atomsel("segname %s and "%chain + all_prot)
	PROT2=atomsel("segname %s and "%chain + all_prot)

	############################
	######Contacts calculation
	#############################
	df_cont=get_contacts(PROT1,PROT2,3.9,True,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1'],code='SC')
	# print df_cont.head()
	# df_cont=pd.DataFrame()
	######################################################
	#Now let's proceed with hydrogen bonds               #
	######################################################
	#not sure how this will work out
	df_hbonds=get_hbonds_imp(PROT1,PROT2,3.5,30,True,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1','param2','param3'])
	# print df_hbonds.head()

	#################################################
	## Now let's calculate salt bridges
	#############
	df_ionpairs=get_salt_bridges_imp(PROT1,PROT2,3.9,True,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1'])

	#############
	# Now let's go for Water mediated interactions
	####
	df_watermed_bonds=get_watermed_bonds_imp(PROT1,PROT2,3.5,30,True,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param3'])

	##########################
	#Now let's see ion mediated bonds
	#####
	df_ionmed_bonds=get_ionmed_bonds_imp(PROT1,PROT2,3.9,True,columns=['PROT1_chain','PROT1_resid','PROT1_atom','PROT2_chain','PROT2_resid','PROT2_atom','type','param1','param3'],code='IM')
	
	df=pd.concat([df_cont,df_hbonds,df_ionpairs,df_watermed_bonds,df_ionmed_bonds])
	df = df.reset_index(drop=True)
	#We want to drop all the interactions within the same residue to make life simplier
	df = df[df.PROT1_resid!=df.PROT2_resid]
	sum_df=pd.concat([sum_df,df])

sum_df = sum_df.reset_index(drop=True)

sum_df.to_csv('../analysis_data/prot_prot_raw_df_cryst.csv',index=False)
###Here are some display snippets

if(0):
	evaltcl('play nucl_repr.tcl')
	reps=mol.reps()
	vdw=MoleculeRep(style='VDW', material='Opaque', color='name')
	mol.addRep(vdw)
	vdw.changeSelection("segname CHC and noh and resid 30 33 35 37 38 39 40 41 48 62 71 73 75 76 79 89 94 95 97 98 100 104 110 117")
	#get the list of interacting residues
	
	# a,b,d=zip(*contacts)
	# c=0
	# for i,j in zip(a,b):
	# 	vdw=MoleculeRep(style='VDW', material='Opaque')
	# 	mol.addRep(vdw)     
	# 	#index=" ".join(map(str,(list(a)+list(b))))
	# 	vdw.changeSelection('index %d %d'%(i,j))
	# 	vdw.changeColor("ColorID %d"%(c%32))
	# 	c=c+1


if(0):
	reps=mol.reps()
	reps[0].changeSelection("(nucleic or PROTein) and noh")
	a,b,d=zip(*contacts)
	vdw=MoleculeRep(style='VDW', material='Opaque')
	mol.addRep(vdw)     
	index=" ".join(map(str,(list(a))))
	vdw.changeSelection('index %s'%index)
	# vdw.changeColor("ColorID %d"%(c%32))

# mol load psf only_nucl_init.psf
# mol addfile only_nucl_aligned.pdb waitfor all


# set hlist [list "segname CHA" "segname CHE" "segname CHB" "segname CHF" "segname CHC" "segname CHG" "segname CHD" "segname CHH"]
# set hname [list "H3_A" "H3_E" "H4_B" "H4_F" "H2A_C" "H2A_G" "H2B_D" "H2B_H"]




# set nframes [expr  [molinfo top get numframes]  ]

# set sel [atomselect top "nucleic"]
# set sel2 [atomselect top "PROTein"]


# set atoms [$sel list]

#do something
print "Execution time:"
print(datetime.now()-startTime)
print "Total interactions",len(sum_df)
print "Total H-bonds",len(sum_df[sum_df.type=='HB'])
print "Total SC",len(sum_df[sum_df.type=='SC'])

# if not (len(sum_df)==3590):
    # raise AssertionError()
# exit
exit()


