#We get raw data frames for nucleosome-water interactions in nucleosome
#This version is for crystal
# is produces a bit different data frame - since we do not know the positions of hydrogens


from VMD import *
from Molecule import *
from atomsel import *
import pandas as pd
import numpy as np
from datetime import datetime
from animate import *
import sys
sys.path.append('/Volumes/MDBD/Dropbox/work/MYSOFT/structure_analysis')


from int_analyze import find_contacts
from int_analyze import find_hbonds
from int_analyze import find_watermed_bonds
from int_analyze import find_watermed_bonds2
from int_analyze import find_ionmed_bonds


from vmd_int_analyze import get_contacts
from vmd_int_analyze import get_hbonds, get_hbonds_imp, get_salt_bridges_imp, get_watermed_bonds_imp, get_ionmed_bonds_imp

# from collections import OrderedDict
#import sys

#Let's define data frame panel
sum_df=pd.DataFrame()

startTime = datetime.now()



mol=Molecule()

mol.load("../input/1kx5_ready.psf")
mol.load("../analysis_data/md_nucl_solv.dcd",first=0,step=1)
nf=mol.numFrames()

#Here we need to produce a raw data frame for WATein-DNA interactions
#See definitions in our report

for i in range(0,nf):
	goto(i)
	print "Frame",i

	######################################################
	#Now let's proceed with hydrogen bonds               #
	######################################################

	INT=atomsel("(nucleic and noh and (name \"N.*\" or name \"O.*\")) or ((protein and noh and (name \"N.*\" or name \"O.*\" or name \"S.*\")) and ((segname CHA CHE and resid > 36) or (segname CHB CHF and resid > 15) or (segname CHC CHG and resid > 11 and resid < 119) or (segname CHD CHH and resid > 20)))")
	WAT=atomsel("name OH2 and within 4.0 of index %s" % " ".join(map(str,INT.get('index'))))

	df=get_hbonds_imp(INT,WAT,3.5,30,columns=['INT_chain','INT_resid','INT_atom','WAT_chain','WAT_resid','WAT_atom','type','param1','param2','param3'])

	df=df.convert_objects(convert_numeric=True)
	sum_df=pd.concat([sum_df,df])

	# print df2.dtypes
grouped=sum_df.groupby(['INT_chain','INT_resid','INT_atom'])
c=grouped['param1'].count()
p1m=grouped['param1'].mean()
p2m=grouped['param2'].mean()

adf=pd.DataFrame({'num_HB':c,'param1':p1m,'param2':p2m})
adf=adf.reset_index()
adf['num_HB']=adf['num_HB']/float(nf)
	# adf['Time']=i
	# sum_df=pd.concat([sum_df,adf])
# sum_df = sum_df.reset_index(drop=True)

# print cc[:5]	
# df=pd.concat([df_cont,df_hbonds,df_ionpairs,df_watermed_bonds,df_ionmed_bonds])
# df = df.reset_index(drop=True)
# print df
# print df_contacts
# panel_dict[0]=df
#
# p=pd.Panel(panel_dict)

# bdf = pd.DataFrame()
# for key in panel_dict:
# 	value=panel_dict[key]
# 	value['Time']=key
# 	bdf=bdf.append(value)
adf.to_csv('../analysis_data/wat_int_raw_df.csv',index=False)
###Here are some display snippets

if(0):
	reps=mol.reps()
	reps[0].changeSelection("(nucleic or WATein) and noh")
	a,b,d=zip(*contacts)
	c=0
	for i,j in zip(a,b):
		vdw=MoleculeRep(style='VDW', material='Opaque')
		mol.addRep(vdw)     
		#index=" ".join(map(str,(list(a)+list(b))))
		vdw.changeSelection('index %d %d'%(i,j))
		vdw.changeColor("ColorID %d"%(c%32))
		c=c+1


if(0):
	reps=mol.reps()
	reps[0].changeSelection("(nucleic or WATein) and noh")
	a,b,d=zip(*contacts)
	vdw=MoleculeRep(style='VDW', material='Opaque')
	mol.addRep(vdw)     
	index=" ".join(map(str,(list(a))))
	vdw.changeSelection('index %s'%index)
	# vdw.changeColor("ColorID %d"%(c%32))

# mol load psf only_nucl_init.psf
# mol addfile only_nucl_aligned.pdb waitfor all


# set hlist [list "segname CHA" "segname CHE" "segname CHB" "segname CHF" "segname CHC" "segname CHG" "segname CHD" "segname CHH"]
# set hname [list "H3_A" "H3_E" "H4_B" "H4_F" "H2A_C" "H2A_G" "H2B_D" "H2B_H"]




# set nframes [expr  [molinfo top get numframes]  ]

# set sel [atomselect top "nucleic"]
# set sel2 [atomselect top "WATein"]


# set atoms [$sel list]

#do something
print "Execution time:"
print(datetime.now()-startTime)
print "Total number of H-bonds",sum(adf.num_HB)

# exit

exit()

