#We get raw data frames for ION nucleosome interactions in nucleosome
#This version is for crystal
# is produces a bit different data frame - since we do not know the positions of hydrogens


from VMD import *
from Molecule import *
from atomsel import *
import pandas as pd
import numpy as np
from datetime import datetime
from animate import *


from int_analyze import find_contacts
from int_analyze import find_hbonds
from int_analyze import find_watermed_bonds
from int_analyze import find_watermed_bonds2
from int_analyze import find_ionmed_bonds

# from collections import OrderedDict
#import sys

#Let's define data frame panel

sum_df=pd.DataFrame()

startTime = datetime.now()



#print sys.path
### Let's load the structure

mol=Molecule()
# mol.load("only_nucl_init.psf")
# mol.load("only_nucl_aligned.pdb")

# mol.load("structs/CCGG.pdb")


mol.load("../analysis_data/system_aligned.pdb")
mol.load("../analysis_data/md_nucl_solv.dcd",first=250,step=1)
nf=mol.numFrames()

#Here we need to produce a raw data frame for PROTein-DNA interactions
#See definitions in our report



###Here we start a loop over frames
for i in range(1,nf):
	goto(i)
	print "Frame",i-1

	######Contacts calculation
	### distance between non H-bonded atoms less than 3.9A
	#Let's define selections
	# To comply with our truncated model system, for crystal we do truncation here

	ION=atomsel("name 'Na+' 'Cl-' ")
	INT=atomsel("noh and ((segname CHA CHE and resid > 36) or (segname CHB CHF and resid > 15) or (segname CHC CHG and resid > 11 and resid < 119) or (segname CHD CHH and resid > 20) or segname CHI CHJ)")

	ION_ind=ION.get('index')
	ION_name=ION.get('name')
	ION_resid=ION.get('resid')
	ION_chain=ION.get('segname')
	ION_xyz=zip(ION.get('x'),ION.get('y'),ION.get('z'))
	ION_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(ION_ind,ION_chain,ION_resid,ION_name))
	#ION_xyz=zip(ION.get('x'),ION.get('y'),ION.get('z'))

	INT_ind=INT.get('index')
	INT_name=INT.get('name')
	INT_resid=INT.get('resid')
	INT_chain=INT.get('segname')
	INT_xyz=zip(INT.get('x'),INT.get('y'),INT.get('z'))
	INT_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(INT_ind,INT_chain,INT_resid,INT_name))


	## Now we can call a contact kernel
	# Input: coordinates and indices of group A, coordinates ans indices of group B, threshold

	contacts=find_contacts(INT_xyz,INT_ind,ION_xyz,ION_ind,3.9,False)
	# print contacts
	num_cont=len(contacts)
	print "ION nucleosome contacts found: ", num_cont
	#let's form numpy arrays and convert them to data frame
	df_cont=pd.DataFrame()

	if(num_cont!=0):
		cont_np=np.array(contacts)

		#get ION chain list
		ION_ind_list=np.array([x for x in cont_np[:,1] ],ndmin=2)
		ION_resid_list=np.array([ION_params[x][1] for x in cont_np[:,1] ],ndmin=2)
		ION_atom_list=np.array([ION_params[x][2] for x in cont_np[:,1] ],ndmin=2)
		# print ION_chain_list
		# print chains

		INT_chain_list=np.array([INT_params[x][0] for x in cont_np[:,0] ],ndmin=2)
		INT_resid_list=np.array([INT_params[x][1] for x in cont_np[:,0] ],ndmin=2)
		INT_atom_list=np.array([INT_params[x][2] for x in cont_np[:,0] ],ndmin=2)

		#let's make a numpy array for data frame
		df_array=np.hstack((ION_ind_list.T,ION_atom_list.T,INT_chain_list.T,INT_resid_list.T,INT_atom_list.T,np.array(['C']*num_cont,ndmin=2).T,np.expand_dims(cont_np[:,2],axis=1).astype('|S7')))
		# print df_array
		df_cont=pd.DataFrame(df_array,columns=['ION_ind','ION_atom','INT_chain','INT_resid','INT_atom','type','param1'])

	######################################################
	#Now let's proceed with hydrogen bonds               #
	######################################################

	ION_heavy=atomsel("name 'Na+' 'Cl-' ")
	INT_heavy=atomsel("((nucleic or protein) and noh and (name \"N.*\" or name \"O.*\" or name \"S.*\")) and ((segname CHA CHE and resid > 36) or (segname CHB CHF and resid > 15) or (segname CHC CHG and resid > 11 and resid < 119) or (segname CHD CHH and resid > 20) or segname CHI CHJ)")

	#The bonds to Hydrogen in charmm are all less than 1.2 A
	#Let's get the corresponding hydrogens
	ION_H=atomsel("hydrogen and within 0.3 of index %s" % " ".join(map(str,ION_heavy.get('index'))))
	INT_H=atomsel("hydrogen and within 1.4 of index %s" % " ".join(map(str,INT_heavy.get('index'))))

	ION_heavy_ind=ION_heavy.get('index')
	ION_heavy_name=ION_heavy.get('name')
	ION_heavy_resid=ION_heavy.get('resid')
	ION_heavy_chain=ION_heavy.get('segname')
	ION_heavy_xyz=zip(ION_heavy.get('x'),ION_heavy.get('y'),ION_heavy.get('z'))
	ION_H_xyz=zip(ION_H.get('x'),ION_H.get('y'),ION_H.get('z'))
	ION_heavy_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(ION_heavy_ind,ION_heavy_chain,ION_heavy_resid,ION_heavy_name))

	# print ION_heavy_ind[1711]

	INT_heavy_ind=INT_heavy.get('index')
	INT_heavy_name=INT_heavy.get('name')
	INT_heavy_resid=INT_heavy.get('resid')
	INT_heavy_chain=INT_heavy.get('segname')
	INT_heavy_xyz=zip(INT_heavy.get('x'),INT_heavy.get('y'),INT_heavy.get('z'))
	INT_H_xyz=zip(INT_H.get('x'),INT_H.get('y'),INT_H.get('z'))
	INT_heavy_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(INT_heavy_ind,INT_heavy_chain,INT_heavy_resid,INT_heavy_name))

	## Now we can call a hbonds kernel
	# Input: list of donors coordinates and indices, list of coordinates of all H, list of aceptor coordinates and indices

	#NOTE: for crystal we set D-H-A - any, since Hydrogen positions are arbitrary!
	hbonds=find_hbonds(ION_heavy_xyz,ION_heavy_ind,ION_H_xyz,INT_heavy_xyz,INT_heavy_ind,INT_H_xyz,3.5,30)

	num_hbonds=len(hbonds)
	print "ION-nucleosome H-bonds found: ", num_hbonds
	df_hbonds=pd.DataFrame()
	if(num_hbonds>0):
	# print hbonds

		hbonds_np=np.array(hbonds)
		#get ION chain list
		# print type(ION_heavy_params.keys()[1726])
		# print type(hbonds_np[0,0])
		ION_ind_list=np.array([x for x in hbonds_np[:,0] ],ndmin=2)
		ION_atom_list=np.array([ION_heavy_params[int(x)][2] for x in hbonds_np[:,0] ],ndmin=2)
		# print ION_chain_list
		# print chains

		INT_chain_list=np.array([INT_heavy_params[int(x)][0] for x in hbonds_np[:,1] ],ndmin=2)
		INT_resid_list=np.array([INT_heavy_params[int(x)][1] for x in hbonds_np[:,1] ],ndmin=2)
		INT_atom_list=np.array([INT_heavy_params[int(x)][2] for x in hbonds_np[:,1] ],ndmin=2)



		#let's make a numpy array for data frame
		df_array=np.hstack((ION_ind_list.T,ION_atom_list.T,INT_chain_list.T,INT_resid_list.T,INT_atom_list.T,np.array(['HB']*num_hbonds,ndmin=2).T,np.expand_dims(hbonds_np[:,3],axis=1).astype('|S7'),np.expand_dims(hbonds_np[:,4],axis=1).astype('|S7'),np.expand_dims(hbonds_np[:,2],axis=1).astype('|S7')))
		# print df_array
		df_hbonds=pd.DataFrame(df_array,columns=['ION_ind','ION_atom','INT_chain','INT_resid','INT_atom','type','param1','param2','param3'])

	#################################################
	## Now let's calculate ion pairs
	## less than 4A distance between chared atoms
	## Charged in DNA: O1P O2P
	## Charged in  protein: ARG - NH1, NH2, LYS - NZ, ASP - OD1, OD2, GLU - OE1, OE2
	#############
	ION=atomsel("name 'Na+' 'Cl-' ")
	INT=atomsel("(nucleic and noh and (name OP1 OP2 O1P O2P)) or ((resname ARG LYS ASP GLU and (name NH1 NH2 NZ OD1 OD2 OE1 OE2)) and ((segname CHA CHE and resid > 36) or (segname CHB CHF and resid > 15) or (segname CHC CHG and resid > 11 and resid < 119) or (segname CHD CHH and resid > 20)))")


	ION_ind=ION.get('index')
	ION_name=ION.get('name')
	ION_resid=ION.get('resid')
	ION_chain=ION.get('segname')
	ION_xyz=zip(ION.get('x'),ION.get('y'),ION.get('z'))
	ION_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(ION_ind,ION_chain,ION_resid,ION_name))
	#ION_xyz=zip(ION.get('x'),ION.get('y'),ION.get('z'))
	# print ION_ind

	INT_ind=INT.get('index')
	INT_name=INT.get('name')
	INT_resid=INT.get('resid')
	INT_chain=INT.get('segname')
	INT_xyz=zip(INT.get('x'),INT.get('y'),INT.get('z'))
	INT_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(INT_ind,INT_chain,INT_resid,INT_name))
	# print INT_inds


	## Now we can call a contact kernel
	# Input: coordinates and indices of group A, coordinates ans indices of group B, threshold

	contacts=find_contacts(INT_xyz,INT_ind,ION_xyz,ION_ind,3.9,False)
	# print contacts
	num_cont=len(contacts)
	print "ION-nucleosome ion pairs found: ", num_cont
	#let's form numpy arrays and convert them to data frame
	df_ionpairs=pd.DataFrame()
	if(num_cont>0):
		cont_np=np.array(contacts)

		#get ION chain list
		ION_ind_list=np.array([x for x in cont_np[:,1] ],ndmin=2)
		ION_resid_list=np.array([ION_params[x][1] for x in cont_np[:,1] ],ndmin=2)
		ION_atom_list=np.array([ION_params[x][2] for x in cont_np[:,1] ],ndmin=2)
		# print ION_chain_list
		# print chains

		INT_chain_list=np.array([INT_params[x][0] for x in cont_np[:,0] ],ndmin=2)
		INT_resid_list=np.array([INT_params[x][1] for x in cont_np[:,0] ],ndmin=2)
		INT_atom_list=np.array([INT_params[x][2] for x in cont_np[:,0] ],ndmin=2)

		#let's make a numpy array for data frame
		df_array=np.hstack((ION_ind_list.T,ION_atom_list.T,INT_chain_list.T,INT_resid_list.T,INT_atom_list.T,np.array(['IP']*num_cont,ndmin=2).T,np.expand_dims(cont_np[:,2],axis=1).astype('|S7')))
		# print df_array
		df_ionpairs=pd.DataFrame(df_array,columns=['ION_ind','ION_atom','INT_chain','INT_resid','INT_atom','type','param1'])

	#############
	# Now let's go for Water mediated interactions
	#
	#
	#


	ION_heavy=atomsel("name 'Na+' 'Cl-' ")
	INT_heavy=atomsel("((nucleic or protein) and noh and (name \"N.*\" or name \"O.*\" or name \"S.*\")) and ((segname CHA CHE and resid > 36) or (segname CHB CHF and resid > 15) or (segname CHC CHG and resid > 11 and resid < 119) or (segname CHD CHH and resid > 20) or segname CHI CHJ)")
	WAT_heavy=atomsel("water and name O and within 5.0 of index %s" % " ".join(map(str,ION_heavy.get('index'))))
	# print(WAT_heavy.get('index'))

	# print WAT_heavy.get('index')
	#The bonds to Hydrogen in charmm are all less than 1.2 A
	#Let's get the corresponding hydrogens
	ION_H=atomsel("hydrogen and within 0.3 of index %s" % " ".join(map(str,ION_heavy.get('index'))))
	INT_H=atomsel("hydrogen and within 1.4 of index %s" % " ".join(map(str,INT_heavy.get('index'))))
	# print(" ".join(map(str,WAT_heavy.get('index'))))
	WAT_H=atomsel("hydrogen and within 1.4 of index %s" % " ".join(map(str,WAT_heavy.get('index'))))

	ION_heavy_ind=ION_heavy.get('index')
	ION_heavy_name=ION_heavy.get('name')
	ION_heavy_resid=ION_heavy.get('resid')
	ION_heavy_chain=ION_heavy.get('segname')
	ION_heavy_xyz=zip(ION_heavy.get('x'),ION_heavy.get('y'),ION_heavy.get('z'))
	ION_H_xyz=zip(ION_H.get('x'),ION_H.get('y'),ION_H.get('z'))
	ION_heavy_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(ION_heavy_ind,ION_heavy_chain,ION_heavy_resid,ION_heavy_name))

	# print ION_heavy_ind[1711]

	INT_heavy_ind=INT_heavy.get('index')
	INT_heavy_name=INT_heavy.get('name')
	INT_heavy_resid=INT_heavy.get('resid')
	INT_heavy_chain=INT_heavy.get('segname')
	INT_heavy_xyz=zip(INT_heavy.get('x'),INT_heavy.get('y'),INT_heavy.get('z'))
	INT_H_xyz=zip(INT_H.get('x'),INT_H.get('y'),INT_H.get('z'))
	INT_heavy_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(INT_heavy_ind,INT_heavy_chain,INT_heavy_resid,INT_heavy_name))

	WAT_heavy_ind=WAT_heavy.get('index')
	WAT_heavy_name=WAT_heavy.get('name')
	WAT_heavy_resid=WAT_heavy.get('resid')
	WAT_heavy_chain=WAT_heavy.get('segname')
	WAT_heavy_xyz=zip(WAT_heavy.get('x'),WAT_heavy.get('y'),WAT_heavy.get('z'))
	WAT_H_xyz=zip(WAT_H.get('x'),WAT_H.get('y'),WAT_H.get('z'))
	WAT_heavy_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(WAT_heavy_ind,WAT_heavy_chain,WAT_heavy_resid,WAT_heavy_name))


	## Now we can call a hbonds kernel
	# Input: list of donors coordinates and indices, list of coordinates of all H, list of aceptor coordinates and indices

	#NOTE: for crystal we set D-H-A - any, since Hydrogen positions are arbitrary!
	hbonds=find_watermed_bonds(ION_heavy_xyz,ION_heavy_ind,ION_H_xyz,INT_heavy_xyz,INT_heavy_ind,INT_H_xyz,WAT_heavy_xyz,WAT_heavy_ind,WAT_H_xyz,3.5,30)

	num_hbonds=len(hbonds)
	print "ION-nucleosome water mediated bonds found: ", num_hbonds

	# print hbonds
	df_watermed_bonds=pd.DataFrame()
	if(num_hbonds!=0):
		hbonds_np=np.array(hbonds)
		#get ION chain list
		# print type(ION_heavy_params.keys()[1726])
		# print type(hbonds_np[0,0])
		ION_ind_list=np.array([x for x in hbonds_np[:,0] ],ndmin=2)
		ION_resid_list=np.array([ION_heavy_params[int(x)][1] for x in hbonds_np[:,0] ],ndmin=2)
		ION_atom_list=np.array([ION_heavy_params[int(x)][2] for x in hbonds_np[:,0] ],ndmin=2)
		# print ION_chain_list
		# print chains

		INT_chain_list=np.array([INT_heavy_params[int(x)][0] for x in hbonds_np[:,1] ],ndmin=2)
		INT_resid_list=np.array([INT_heavy_params[int(x)][1] for x in hbonds_np[:,1] ],ndmin=2)
		INT_atom_list=np.array([INT_heavy_params[int(x)][2] for x in hbonds_np[:,1] ],ndmin=2)



		#let's make a numpy array for data frame
		df_array=np.hstack((ION_ind_list.T,ION_atom_list.T,INT_chain_list.T,INT_resid_list.T,INT_atom_list.T,np.array(['WM']*num_hbonds,ndmin=2).T,np.expand_dims(hbonds_np[:,2],axis=1).astype('|S7')))
		# df_array=np.hstack((ION_chain_list.T,ION_resid_list.T,ION_atom_list.T,INT_chain_list.T,INT_resid_list.T,INT_atom_list.T,np.array(['WM']*num_hbonds,ndmin=2).T,np.expand_dims(hbonds_np[:,2],axis=1).astype('|S7'))))
		# print df_array
		df_watermed_bonds=pd.DataFrame(df_array,columns=['ION_ind','ION_atom','INT_chain','INT_resid','INT_atom','type','param3'])

	##########################
	#Now let's see ion mediated bonds
	#
	# where a mobile ion is in stable contact with two or more charged or polar atoms.
	#

	ION_heavy=atomsel("name 'Na+' 'Cl-' ")
	INT_heavy=atomsel("(nucleic and noh and (name \"N.*\" or name \"O.*\" or name P)) or ((protein and noh and (name \"N.*\" or name \"O.*\" or name \"S.*\")) and ((segname CHA CHE and resid > 36) or (segname CHB CHF and resid > 15) or (segname CHC CHG and resid > 11 and resid < 119) or (segname CHD CHH and resid > 20)))")


	ION_heavy_ind=ION_heavy.get('index')
	ION_heavy_name=ION_heavy.get('name')
	ION_heavy_resid=ION_heavy.get('resid')
	ION_heavy_chain=ION_heavy.get('segname')
	ION_heavy_xyz=zip(ION_heavy.get('x'),ION_heavy.get('y'),ION_heavy.get('z'))
	ION_heavy_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(ION_heavy_ind,ION_heavy_chain,ION_heavy_resid,ION_heavy_name))


	INT_heavy_ind=INT_heavy.get('index')
	INT_heavy_name=INT_heavy.get('name')
	INT_heavy_resid=INT_heavy.get('resid')
	INT_heavy_chain=INT_heavy.get('segname')
	INT_heavy_xyz=zip(INT_heavy.get('x'),INT_heavy.get('y'),INT_heavy.get('z'))
	INT_heavy_params=dict((key, (chain,resid,name)) for (key,chain,resid,name) in zip(INT_heavy_ind,INT_heavy_chain,INT_heavy_resid,INT_heavy_name))


	# print ION_heavy_ind
	## Now we can call a hbonds kernel

	hbonds=find_ionmed_bonds(ION_heavy_xyz,ION_heavy_ind,INT_heavy_xyz,INT_heavy_ind,ION_heavy_xyz,ION_heavy_ind,3.9,exclude_bonded=True)

	num_hbonds=len(hbonds)
	print "ION-nucleosome ion mediated bonds found: ", num_hbonds

	df_ionmed_bonds=pd.DataFrame()

	if(num_hbonds!=0):
	# print hbonds

		hbonds_np=np.array(hbonds)
		# print hbonds_np
		#get ION chain list
		# print type(ION_heavy_params.keys()[1726])
		# print type(hbonds_np[0,0])
		ION_ind_list=np.array([x for x in hbonds_np[:,0] ],ndmin=2)
		ION_resid_list=np.array([ION_heavy_params[int(x)][1] for x in hbonds_np[:,0] ],ndmin=2)
		ION_atom_list=np.array([ION_heavy_params[int(x)][2] for x in hbonds_np[:,0] ],ndmin=2)
		# print ION_chain_list
		# print chains
		
		INT_chain_list=np.array([INT_heavy_params[int(x)][0] for x in hbonds_np[:,1] ],ndmin=2)
		INT_resid_list=np.array([INT_heavy_params[int(x)][1] for x in hbonds_np[:,1] ],ndmin=2)
		INT_atom_list=np.array([INT_heavy_params[int(x)][2] for x in hbonds_np[:,1] ],ndmin=2)
		
		IONmed_atom_list=np.array([ION_heavy_params[int(x)][2] for x in hbonds_np[:,2] ],ndmin=2)
		
		
		#let's make a numpy array for data frame
		df_array=np.hstack((ION_ind_list.T,ION_atom_list.T,INT_chain_list.T,INT_resid_list.T,INT_atom_list.T,np.array(['IM']*num_hbonds,ndmin=2).T,IONmed_atom_list.T,np.expand_dims(hbonds_np[:,2],axis=1).astype('|S7')))

		# df_array=np.hstack((ION_chain_list.T,ION_resid_list.T,ION_atom_list.T,INT_chain_list.T,INT_resid_list.T,INT_atom_list.T,np.array(['IM']*num_hbonds,ndmin=2).T,ION_atom_list.T,np.expand_dims(hbonds_np[:,2],axis=1).astype('|S7'))))
		# print df_array
		df_ionmed_bonds=pd.DataFrame(df_array,columns=['ION_ind','ION_atom','INT_chain','INT_resid','INT_atom','type','param1','param3'])
		
		


	df=pd.concat([df_cont,df_hbonds,df_ionpairs,df_watermed_bonds,df_ionmed_bonds])
	df = df.reset_index(drop=True)
	df['Time']=i-1
	sum_df=pd.concat([sum_df,df])
sum_df = sum_df.reset_index(drop=True)

# print df
# print df_contacts
# panel_dict[0]=df
#
# p=pd.Panel(panel_dict)

# bdf = pd.DataFrame()
# for key in panel_dict:
# 	value=panel_dict[key]
# 	value['Time']=key
# 	bdf=bdf.append(value)
sum_df.to_csv('../analysis_data/ions_int_raw_df.csv',index=False)
###Here are some display snippets

if(0):
	reps=mol.reps()
	reps[0].changeSelection("(nucleic or PROTein) and noh")
	a,b,d=zip(*contacts)
	c=0
	for i,j in zip(a,b):
		vdw=MoleculeRep(style='VDW', material='Opaque')
		mol.addRep(vdw)     
		#index=" ".join(map(str,(list(a)+list(b))))
		vdw.changeSelection('index %d %d'%(i,j))
		vdw.changeColor("ColorID %d"%(c%32))
		c=c+1


if(0):
	reps=mol.reps()
	reps[0].changeSelection("(nucleic or PROTein) and noh")
	a,b,d=zip(*contacts)
	vdw=MoleculeRep(style='VDW', material='Opaque')
	mol.addRep(vdw)     
	index=" ".join(map(str,(list(a))))
	vdw.changeSelection('index %s'%index)
	# vdw.changeColor("ColorID %d"%(c%32))

# mol load psf only_nucl_init.psf
# mol addfile only_nucl_aligned.pdb waitfor all


# set hlist [list "segname CHA" "segname CHE" "segname CHB" "segname CHF" "segname CHC" "segname CHG" "segname CHD" "segname CHH"]
# set hname [list "H3_A" "H3_E" "H4_B" "H4_F" "H2A_C" "H2A_G" "H2B_D" "H2B_H"]




# set nframes [expr  [molinfo top get numframes]  ]

# set sel [atomselect top "nucleic"]
# set sel2 [atomselect top "PROTein"]


# set atoms [$sel list]

#do something
print "Execution time:"
print(datetime.now()-startTime)

# exit
exit()



